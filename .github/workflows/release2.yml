on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master

  workflow_dispatch:
    inputs:
      version_name:
        description: 'Enter release version name, sample: v7.3.0'
        required: true

name: Create Release2

jobs:
  build:
    name: "Create release 2"
    runs-on: ubuntu-latest
    if: github.event.inputs || (github.event.pull_request.merged && startsWith(github.head_ref, 'release/'))
    env:
      PUBLISH_RELEASE: ${{github.event.inputs && 'false' || 'true'}}

    steps:
      - name: Calculate new version
        run: result=$(echo "${{github.event.inputs && github.event.inputs.version_name || github.head_ref}}" | sed "s/release\///") && echo "NEW_VERSION=$result" >> $GITHUB_ENV
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Detect last version
        run: echo "::set-output name=current_version::$(git describe --abbrev=0 --tags `git rev-list --tags --skip=0 --max-count=1`)"
        id: version_checker

      # building release
      - name: "Build Changelog"
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v1
        with:
          configuration: ".github/workflows/configuration.json"
          fromTag: ${{steps.version_checker.outputs.current_version}}
          toTag: "HEAD"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Print changelog
        run: echo "${{ steps.build_changelog.outputs.changelog }}"
        continue-on-error: true

      - name: Update changelog
        run: echo "$(echo -e "Release $NEW_VERSION($(date +%F))\n$CHANGES\n"; cat CHANGELOG.md)" > CHANGELOG.md
        if: env.PUBLISH_RELEASE == 'false'
        env:
          CHANGES: ${{steps.build_changelog.outputs.changelog}}
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        if: env.PUBLISH_RELEASE == 'false'
        with:
          commit-message: Release ${{ env.NEW_VERSION }}
          labels: release
          title: "Release ${{ env.NEW_VERSION }}"
          base: main
          branch: "release/${{ env.NEW_VERSION }}"
          delete-branch: true
          body: |
            # Release ${{ env.NEW_VERSION }}
            ## Included Pull Requests
            ${{ steps.build_changelog.outputs.changelog }}

      # publishing release
      - name: Create Release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          body: ${{ steps.Changelog.outputs.changelog }}
          draft: false
          prerelease: false
        if: env.PUBLISH_RELEASE == 'true'
      - name: create release
        run: git tag -a ${{env.NEW_VERSION}} -m "Release ${{env.NEW_VERSION}}"
        if: env.PUBLISH_RELEASE == 'true'