# Configure PR branches in release_builder.json#base_branches
# Once created the release PR, edit and point it to the master/main branch (current PR creator does not support it)
on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master

  workflow_dispatch:
    inputs:
      version_name:
        description: 'Enter release version name, sample: v1.0.0'
        required: true

name: Create Release

jobs:
  build:
    name: "Create release"
    runs-on: ubuntu-latest
    if: github.event.inputs || (github.event.pull_request.merged && startsWith(github.head_ref, 'release/'))
    env:
      PUBLISH_RELEASE: ${{github.event.inputs && 'false' || 'true'}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # calculate versions
      - name: Calculate new version
        run: result=$(echo "${{github.event.inputs && github.event.inputs.version_name || github.head_ref}}" | sed "s/release\///") && echo "NEW_VERSION=$result" >> $GITHUB_ENV
      - name: Detect last version
        run: echo "::set-output name=current_version::$(git describe --abbrev=0 --tags `git rev-list --tags --skip=0 --max-count=1`)"
        id: version_checker

      - name: Create temp git tag (draft)
        run: |
          git config --global user.name "$(git --no-pager log --format=format:'%an' -n 1)"
          git config --global user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
          git tag -a $NEW_VERSION.draft -m "Release $NEW_VERSION (draft)"
          git push --tags

      # building release
      - name: "Build Changelog"
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v1
        with:
          configuration: ".github/workflows/release_builder.json"
          fromTag: ${{steps.version_checker.outputs.current_version}}
          toTag: ${{env.NEW_VERSION}}.draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Print changelog
        run: echo "${{ steps.build_changelog.outputs.changelog }}"
        continue-on-error: true

      - name: Update changelog
        run: echo "$(echo -e "# Release $NEW_VERSION ($(date +%F))\n$CHANGES\n"; cat CHANGELOG.md)" > CHANGELOG.md
        if: env.PUBLISH_RELEASE == 'false'
        env:
          CHANGES: ${{steps.build_changelog.outputs.changelog}}


      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        if: env.PUBLISH_RELEASE == 'false'
        with:
          commit-message: Release ${{ env.NEW_VERSION }}
          labels: release
          title: "Release ${{ env.NEW_VERSION }}"
          branch: "release/${{ env.NEW_VERSION }}"
          # base: staging # unfortunately there is no way to set custom target branch without affecting base
          delete-branch: true
          assignees: "${{github.actor}}"
          body: |
            # Release ${{ env.NEW_VERSION }}
            ## Included Pull Requests
            ${{ steps.build_changelog.outputs.changelog }}

      # Publish release
      - name: Publish git tag
        uses: mathieudutour/github-tag-action@v5.6
        if: env.PUBLISH_RELEASE == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{env.NEW_VERSION}}
          tag_prefix: ""
      - name: Publish github release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          body: ${{ steps.build_changelog.outputs.changelog }}
          draft: false
          prerelease: false
        if: env.PUBLISH_RELEASE == 'true'

      - name: remove temp git tag (draft)
        run: git push --delete origin $NEW_VERSION.draft
        if: always()